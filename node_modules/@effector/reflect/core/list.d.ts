import { Store } from 'effector';
import React from 'react';
import { BindableProps, Context, Hooks, PartialBoundProps, View } from './types';
type ReflectListConfig<Props, Item, Bind> = Item extends Props ? {
    view: View<Props>;
    source: Store<Item[]>;
    bind?: Bind;
    hooks?: Hooks;
    getKey?: (item: Item) => React.Key;
    mapItem?: {
        [P in keyof PartialBoundProps<Props, Bind>]: (item: Item, index: number) => PartialBoundProps<Props, Bind>[P];
    };
} : {
    view: View<Props>;
    source: Store<Item[]>;
    bind?: undefined;
    hooks?: Hooks;
    getKey?: (item: Item) => React.Key;
    mapItem: {
        [P in keyof Props]: (item: Item, index: number) => Props[P];
    };
} | {
    view: View<Props>;
    source: Store<Item[]>;
    bind: Bind;
    hooks?: Hooks;
    getKey?: (item: Item) => React.Key;
    mapItem?: {
        [P in keyof PartialBoundProps<Props, Bind>]: (item: Item, index: number) => PartialBoundProps<Props, Bind>[P];
    };
};
export declare function listFactory(context: Context): <Item extends Record<any, any>, Props, Bind extends BindableProps<Props> = BindableProps<Props>>(config: ReflectListConfig<Props, Item, Bind>) => React.FC;
export {};
