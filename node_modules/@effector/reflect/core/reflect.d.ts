import React from 'react';
import { BindableProps, Context, Hooks, PartialBoundProps, View } from './types';
export interface ReflectConfig<Props, Bind extends BindableProps<Props>> {
    view: View<Props>;
    bind: Bind;
    hooks?: Hooks;
}
export declare function reflectCreateFactory(context: Context): <Props>(view: View<Props>) => <Bind extends BindableProps<Props> = BindableProps<Props>>(bind: Bind, params?: Pick<ReflectConfig<Props, Bind>, "hooks"> | undefined) => React.FC<PartialBoundProps<Props, Bind>>;
export declare function reflectFactory(context: Context): <Props, Bind extends BindableProps<Props> = BindableProps<Props>>(config: ReflectConfig<Props, Bind>) => React.FC<PartialBoundProps<Props, Bind>>;
