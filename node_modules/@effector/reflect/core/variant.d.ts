import { Store } from 'effector';
import React from 'react';
import { AtLeastOne, BindableProps, Context, Hooks, PartialBoundProps, View } from './types';
export declare function variantFactory(context: Context): <Props, Variant extends string, Bind extends BindableProps<Props>>(config: {
    source: Store<Variant>;
    bind?: Bind | undefined;
    cases: AtLeastOne<Record<Variant, View<Props>>, Record<Variant, View<Props>> extends infer T ? { [K in keyof T]: Pick<Record<Variant, View<Props>>, K>; } : never>;
    hooks?: Hooks | undefined;
    default?: View<Props> | undefined;
} | {
    if: Store<boolean>;
    then: View<Props>;
    else?: View<Props> | undefined;
    hooks?: Hooks | undefined;
    bind?: Bind | undefined;
}) => React.FC<PartialBoundProps<Props, Bind>>;
