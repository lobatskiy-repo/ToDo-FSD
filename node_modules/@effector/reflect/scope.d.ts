/// <reference types="react" />
export declare const reflect: <Props, Bind extends import("./core/types").BindableProps<Props> = import("./core/types").BindableProps<Props>>(config: import("./core/reflect").ReflectConfig<Props, Bind>) => import("react").FC<import("./core/types").PartialBoundProps<Props, Bind>>;
export declare const createReflect: <Props>(view: import("./core/types").View<Props>) => <Bind extends import("./core/types").BindableProps<Props> = import("./core/types").BindableProps<Props>>(bind: Bind, params?: Pick<import("./core/reflect").ReflectConfig<Props, Bind>, "hooks"> | undefined) => import("react").FC<import("./core/types").PartialBoundProps<Props, Bind>>;
export declare const variant: <Props, Variant extends string, Bind extends import("./core/types").BindableProps<Props>>(config: {
    source: import("effector").Store<Variant>;
    bind?: Bind | undefined;
    cases: import("./core/types").AtLeastOne<Record<Variant, import("./core/types").View<Props>>, Record<Variant, import("./core/types").View<Props>> extends infer T ? { [K in keyof T]: Pick<Record<Variant, import("./core/types").View<Props>>, K>; } : never>;
    hooks?: import("./core/types").Hooks | undefined;
    default?: import("./core/types").View<Props> | undefined;
} | {
    if: import("effector").Store<boolean>;
    then: import("./core/types").View<Props>;
    else?: import("./core/types").View<Props> | undefined;
    hooks?: import("./core/types").Hooks | undefined;
    bind?: Bind | undefined;
}) => import("react").FC<import("./core/types").PartialBoundProps<Props, Bind>>;
export declare const list: <Item extends Record<any, any>, Props, Bind extends import("./core/types").BindableProps<Props> = import("./core/types").BindableProps<Props>>(config: Item extends Props ? {
    view: import("./core/types").View<Props>;
    source: import("effector").Store<Item[]>;
    bind?: Bind | undefined;
    hooks?: import("./core/types").Hooks | undefined;
    getKey?: ((item: Item) => import("react").Key) | undefined;
    mapItem?: (import("./core/types").PartialBoundProps<Props, Bind> extends infer T ? { [P in keyof T]: (item: Item, index: number) => import("./core/types").PartialBoundProps<Props, Bind>[P]; } : never) | undefined;
} : {
    view: import("./core/types").View<Props>;
    source: import("effector").Store<Item[]>;
    bind?: undefined;
    hooks?: import("./core/types").Hooks | undefined;
    getKey?: ((item: Item) => import("react").Key) | undefined;
    mapItem: { [P_1 in keyof Props]: (item: Item, index: number) => Props[P_1]; };
} | {
    view: import("./core/types").View<Props>;
    source: import("effector").Store<Item[]>;
    bind: Bind;
    hooks?: import("./core/types").Hooks | undefined;
    getKey?: ((item: Item) => import("react").Key) | undefined;
    mapItem?: (import("./core/types").PartialBoundProps<Props, Bind> extends infer T_1 ? { [P_2 in keyof T_1]: (item: Item, index: number) => import("./core/types").PartialBoundProps<Props, Bind>[P_2]; } : never) | undefined;
}) => import("react").FC<{}>;
